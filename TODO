make a module for artificial viscosity (store n * ngmax values)
make a module for wharmonic (store n * ngmax values)
make a module for wharmonic_derivatives (store n * ngmax values)

n * ngmax is too much!

=> each process actually process n / nrank so this is ALMOST okay...
=> Doing that on one process will kill the node though
=> We need a chunking mechanism

Computing all steps for one particle at a time is not enough
Computing all steps for all particles is too much
Computing all steps for x particles is perfect!

for timestep t=0:1000
	for i=1:n
		workflow.compute(i)

=> Too much computational overhead for one particle

for timestep t=0:1000
	workflow.compute(1:n)

=> Too much memory overhead!

for timestep t=0:1000
	for i=1:n/chunk_size
		workflow.compute(chunk[i])

=> Too much memory overhead!

Note that gravity might have to be computed beforehand because UpdateQuantties needs global informations


chunks can be created with a morton ordering or a tree so that particles in a chunk a very close to each other