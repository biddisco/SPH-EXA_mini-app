#include <cstdlib>
#include <cstdio>
#include <vector>
#include <fstream> 

int main()
{
    const int n = 1000000;


    std::vector<double> x(n), y(n), z(n), vx(n), vy(n), vz(n), p_0(n), h(n), volume(n), m(n);
    
    printf("Opening the file\n");
    FILE *f = fopen("squarepatch3D_1M", "r");
    
    if(f)
    {
        for(int i=0; i<3; i++)
        {   
            fscanf(f, "%lf %lf %lf %lf %lf %lf %lf %lf %lf %lf\n", &x[i], &y[i], &z[i], &vx[i], &vy[i], &vz[i], &p_0[i], &h[i], &volume[i], &m[i]);
            // printf("%lf %lf %lf %lf %lf %lf %lf %lf %lf %lf\n", x[i], y[i], z[i], vx[i], vy[i], vz[i], p_0[i], h[i], volume[i], m[i]);
        }

        fclose(f);

        std::ofstream ofs("squarepatch3D_1M.bin", std::ofstream::out | std::ofstream::binary | std::ofstream::app);
        
        if(ofs)
        {
            ofs.write(reinterpret_cast<const char*>(&x), x.size() * sizeof(double));
            ofs.write(reinterpret_cast<const char*>(&y), y.size() * sizeof(double));
            ofs.write(reinterpret_cast<const char*>(&z), z.size() * sizeof(double));
            ofs.write(reinterpret_cast<const char*>(&vx), vx.size() * sizeof(double));
            ofs.write(reinterpret_cast<const char*>(&vy), vy.size() * sizeof(double));
            ofs.write(reinterpret_cast<const char*>(&vz), vz.size() * sizeof(double));
            ofs.write(reinterpret_cast<const char*>(&p_0), p_0.size() * sizeof(double));
        }

        else
            printf("Error: couldn't open file for writing.\n");
    }
    else
        printf("Error: couldn't open file for reading.\n");

    return 0;
}